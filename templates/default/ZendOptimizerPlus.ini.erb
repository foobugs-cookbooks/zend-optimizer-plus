[ZendOptimizerPlus]

zend_extension=<%= "#{node['optimizer']['extension_dir']}/ZendOptimizerPlus.so" %>

; Optimizer+ On/Off switch. When set to Off, code is not optimized.
; Default: "1"
zend_optimizerplus.enable=<%= "#{node['optimizer']['config_enable']}" %>

; Optimizer+ On/Off switch for CLI mode. When set to Off, code is not optimized.
; Default: "1"
zend_optimizerplus.enable_cli=<%= "#{node['optimizer']['config_enable_cli']}" %>

; The Optimizer+ shared memory storage size. The amount of memory for storing
; precompiled PHP code in Mbytes.
; Default: "64"
zend_optimizerplus.memory_consumption=<%= "#{node['optimizer']['config_memory_consumption']}" %>

; The amount of memory for interned strings in Mbytes.
; Default: "4"
zend_optimizerplus.interned_strings_buffer=<%= "#{node['optimizer']['config_interned_strings_buffer']}" %>

; The maximum number of keys (scripts) in the Optimizer+ hash table.
; The number is actually the first one in the following set of prime
; numbers that is bigger than the one supplied: { 223, 463, 983, 1979, 3907,
; 7963, 16229, 32531, 65407, 130987 }. Only numbers between 200 and 100000
; are allowed.
; Default: "2000"
zend_optimizerplus.max_accelerated_files=<%= "#{node['optimizer']['config_max_accelerated_files']}" %>

; The maximum percentage of "wasted" memory until a restart is scheduled.
; Default: "5"
zend_optimizerplus.max_wasted_percentage=<%= "#{node['optimizer']['config_max_wasted_percentage']}" %>

; When this directive is enabled, the Optimizer+ appends the current working
; directory to the script key, thus eliminating possible collisions between
; files with the same name (basename). Disabling the directive improves
; performance, but may break existing applications.
; Default: "1"
zend_optimizerplus.use_cwd=<%= "#{node['optimizer']['config_use_cwd']}" %>

; When disabled, you must reset the Optimizer+ manually or restart the
; webserver for changes to the filesystem to take effect.
; The frequency of the check is controlled by the directive
; "zend_optimizerplus.revalidate_freq".
; Default: "1"
zend_optimizerplus.validate_timestamps=<%= "#{node['optimizer']['config_validate_timestamps']}" %>

; How often (in seconds) to check file timestamps for changes to the shared
; memory storage allocation.
; Default: "2"
zend_optimizerplus.revalidate_freq=<%= "#{node['optimizer']['config_revalidate_freq']}" %>

; Enables or disables file search in include_path optimization
; If the file search is disabled and a cached file is found that uses
; the same include_path, the file is not searched again. Thus, if a file
; with the same name appears somewhere else in include_path, it
; won't be found. Enable this directive if this optimization has an effect on
; your applications. The default for this directive is disabled, which means
; that optimization is active.
; Default: "0"
zend_optimizerplus.revalidate_path=<%= "#{node['optimizer']['config_revalidate_path']}" %>

; If disabled, all PHPDoc comments are dropped from the code to reduce the
; size of the optimized code. Disabling "Doc Comments" may break some
; existing applications and frameworks (e.g. Doctrine, ZF2, PHPUnit)
; Default: "1"
zend_optimizerplus.save_comments=<%= "#{node['optimizer']['config_save_comments']}" %>

; If disabled, PHPDoc comments are not loaded from SHM, so "Doc Comments"
; may be always stored (save_comments=1), but not loaded by applications
; that don't need them anyway.
; Default: "1"
zend_optimizerplus.load_comments=<%= "#{node['optimizer']['config_load_comments']}" %>

; If enabled, a fast shutdown sequence is used for the accelerated code
; The fast shutdown sequence doesn't free each allocated block, but lets
; the Zend Engine Memory Manager do the work.
; Default: "0"
zend_optimizerplus.fast_shutdown=<%= "#{node['optimizer']['config_fast_shutdown']}" %>

; Allow file existence override (file_exists, etc.) performance feature.
; Default: "0"
zend_optimizerplus.enable_file_override=<%= "#{node['optimizer']['config_enable_file_override']}" %>

; A bitmask, where each bit enables or disables the appropriate Optimizer+
; passes
; Default: "0xffffffff"
zend_optimizerplus.optimization_level=<%= "#{node['optimizer']['config_optimization_level']}" %>

; Enable this hack as a workaround for "can't redeclare class" errors.
; The Optimizer+ stores the places where DECLARE_CLASS opcodes use
; inheritance (These are the only opcodes that can be executed by PHP,
; but which may not be executed because the parent class is missing due to
; optimization). When the file is loaded, Optimizer+ tries to bind the
; inherited classes by using the current environment. The problem with this
; scenario is that, while the DECLARE_CLASS opcode may not be needed for the
; current script, if the script requires that the opcode at least be defined,
; it may not run. The default for this directive is disabled, which means
; that optimization is active. In php-5.3 and above this hack is not needed
; anymore and this setting has no effect.
; Default: "1"
zend_optimizerplus.inherited_hack=<%= "#{node['optimizer']['config_inherited_hack']}" %>

; Enable this hack as a workaround for "duplicate definition" errors.
; Default: "0"
zend_optimizerplus.dups_fix=<%= "#{node['optimizer']['config_dups_fix']}" %>

; The location of the Optimizer+ blacklist file.
; The Optimizer+ blacklist file is a text file that holds the names of files
; that should not be accelerated. The file format is to add each filename
; to a new line. The filename may be a full path or just a file prefix
; (i.e., /var/www/x  blacklists all the files and directories in /var/www
; that start with 'x'). Files are usually triggered by one of the following
; three reasons:
; 1) Directories that contain auto generated code, like Smarty or ZFW cache.
; 2) Code that does not work well when accelerated, due to some delayed
; compile time evaluation.
; 3) Code that triggers an Optimizer+ bug.
; Default: ""
zend_optimizerplus.blacklist_filename=<%= "#{node['optimizer']['config_blacklist_filename']}" %>

; Check the cache checksum each N requests.
; The default value of "0" means that the checks are disabled.
; Because calculating the checksum impairs performance, this directive should
; be enabled only as part of a debugging process.
; Default: "0"
zend_optimizerplus.consistency_checks=<%= "#{node['optimizer']['config_consistency_checks']}" %>

; How long to wait (in seconds) for a scheduled restart to begin if the cache
; is not being accessed.
; The Optimizer+ uses this directive to identify a situation where there may
; be a problem with a process. After this time period has passed, the
; Optimizer+ assumes that something has happened and starts killing the
; processes that still hold the locks that are preventing a restart.
; If the log level is 3 or above, a "killed locker" error is recorded
; in the Apache logs when this happens.
; Default: "180"
zend_optimizerplus.force_restart_timeout=<%= "#{node['optimizer']['config_force_restart_timeout']}" %>

; Optimizer+ error_log file name. Empty string assumes "stderr".
; Default: ""
zend_optimizerplus.error_log=<%= "#{node['optimizer']['config_error_log']}" %>

; All Optimizer+ errors go to the Web server log.
; By default, only fatal errors (level 0) or errors (level 1) are logged.
; You can also enable warnings (level 2), info messages (level 3) or
; debug messages (level 4).
; Default: "1"
zend_optimizerplus.log_verbosity_level=<%= "#{node['optimizer']['config_log_verbosity_level']}" %>

; Preffered Shared Memory back-end. Leave empty and let the system decide.
; Default: ""
zend_optimizerplus.preferred_memory_model=<%= "#{node['optimizer']['config_preferred_memory_model']}" %>

; Protect the shared memory from unexpected writing during script execution.
; Useful for internal debugging only.
; Default: "0"
zend_optimizerplus.protect_memory=<%= "#{node['optimizer']['config_protect_memory']}" %>
